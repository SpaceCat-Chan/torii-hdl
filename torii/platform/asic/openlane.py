# SPDX-License-Identifier: BSD-3-Clause

from abc           import abstractmethod
from typing        import Dict, Union, Optional, List, Tuple
from pathlib       import Path

from ...build.plat import TemplatedPlatform

__all__ = (
	'OpenLANEPlatform',
)

class OpenLANEPlatform(TemplatedPlatform):
	'''
	.. note::

		See https://github.com/The-OpenROAD-Project/OpenLane#setting-up-openlane for instructions on
		setting up OpenLANE and the various PDKs.

	.. note::

		See https://openlane.readthedocs.io/en/latest/configuration/README.html#variables-information for
		more detailed information on the various ``flow_settings`` available.

	Required tools:
		* ``OpenLANE``
		* ``docker``

	Build products:
		* ``config.tcl``: OpenLANE Flow configuration
		* ``{{name}}.sdc``: Timing and clock constraints
		* ``{{name}}.v``: Design Verilog
		* ``{{name}}.debug.v``: Design debug verilog
		* ``runs/*``: OpenLANE flow output

	'''

	openlane_root : Optional[Path] = None
	pdk_path      : Optional[Path] = None

	@property
	@abstractmethod
	def pdk(self) -> str:
		raise NotImplementedError('Platform must implement this property')

	@property
	@abstractmethod
	def cell_library(self) -> str:
		raise NotImplementedError('Platform must implement this property')

	@property
	@abstractmethod
	def flow_settings(self) -> Dict[str, Union[str, int, float]]:
		raise NotImplementedError('Platform must implement this property')

	_openlane_required_tools = (
		'docker',
	)

	_openlane_file_templates = {
		'build_{{name}}.sh': '''
			# {{autogenerated}}
			set -e{{verbose("x")}}
			[ -n "${{platform._deprecated_toolchain_env_var}}" ] && . "${{platform._deprecated_toolchain_env_var}}"
			[ -n "${{platform._toolchain_env_var}}" ] && . "${{platform._toolchain_env_var}}"
			{{emit_commands("sh")}}
		''',
		'''{{name}}.v''': r'''
			/* {{autogenerated}} */
			{{emit_verilog()}}
		''',
		'''{{name}}.debug.v''': r'''
			/* {{autogenerated}} */
			{{emit_debug_verilog()}}
		''',
	}

	_openlane_command_templates = (
		r'''
		UID=$(id -u)
		GID=$(id -g)
		{{invoke_tool("docker")}}
			run
			-it
			--rm
			-v {{get_override("OpenLANE")|default(platform.openlane_root)}}:/openLANE_flow
			-v {{get_override("PDKPath")|default(platform.pdk_path)}}:/PDK
			-v {{platform.build_dir}}:/design_{{name}}
			-e PDK_ROOT=/PDK
			-u $UID:$GID
			efabless/openlane:{{get_override("openlane_version")|default("latest")}}
			sh -c "./flow.tcl -design /design_{{name}}"
		''',
	)

	_build_dir : Optional[Path] = None

	def __init__(self) -> None:
		super().__init__()

	@property
	def required_tools(self) -> Tuple[str]:
		return self._openlane_required_tools

	@property
	def file_templates(self) -> Dict[str, str]:
		return self._openlane_file_templates

	@property
	def command_templates(self) -> List[str]:
		return self._openlane_command_templates

	def build(self, *args, **kwargs):
		self._build_dir = Path(kwargs.get('build_dir', 'build'))
		return super().build(*args, **kwargs)
